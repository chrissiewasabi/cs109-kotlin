<?xml version="1.0" encoding="UTF-8"?>
<!--

 This is a language definition file for Kotlin in GtkSourceView.

 Created by modifying scala.lang.

 Authors of scala.lang: Min Huang, Felix Dietze
   Copyright (C) 2009 Min Huang <min.huang@alumni.usc.edu>
   Copyright (C) 2012 Felix Dietze <felix@beerleader.net>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->
<language id="kotlin" _name="Kotlin" version="2.0" _section="Source">

  <metadata>
    <property name="mimetypes">text/x-kotlin</property>
    <property name="globs">*.kt;*.kts</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="error" _name="Error" map-to="def:error"/>
    <style id="external" _name="External" map-to="def:preprocessor"/>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="escaped-character" _name="Escaped Character" map-to="def:special-char"/>
    <style id="declaration" _name="Declaration" map-to="def:type"/>
    <style id="modifier" _name="Modifier" map-to="def:type"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="special" _name="Special Constant" map-to="def:special-constant"/>
    <style id="number" _name="Number" map-to="def:decimal"/>
    <style id="operator" _name="Operator" map-to="def:operator"/>
    <style id="type" _name="Data Type" map-to="def:identifier"/>
    <style id="builtin" _name="Built In" map-to="def:type"/>
    <style id="other" _name="Other" map-to="def:special-char"/>
    <style id="xmltag" _name="XML Tag" map-to="def:identifier"/>
  </styles>

  <definitions>
    <define-regex id="escaped-character" extended="true">
      \\(               # leading backslash
      [\\\"\'nrbtf] |   # escaped character
      [0-9]{1,3}    |   # latin encoded char
      u[0-9]{1,4}       # unicode char
      )
    </define-regex>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
      <context id="escaped-character" style-ref="escaped-character">
        <match>\%{escaped-character}</match>
      </context>
      </include>
    </context>

    <context id="multiline-string" style-ref="string" end-at-line-end="false" class="string" class-disabled="no-spell-check">
      <start>"""</start>
      <end>"""</end>
    </context>

    <context id="operators" style-ref="operator" extend-parent="false">
      <match>[-.~^@,;:/%|\=\+\*\!\?&amp;&lt;&gt;()_\[\]]</match>
    </context>
      
    <context id="character" style-ref="special">
      <match>'(\%{escaped-character}|.)'</match>
    </context>

    <context id="character-error" style-ref="error">
      <match>'(\%{escaped-character}|.)[^\s]+'</match>
    </context>
    
    <context id="symbol" style-ref="special">
      <match>'[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="block-comment" style-ref="comment">
      <start>/\*</start>
      <end>\*/</end>
      <include>
        <context ref="def:in-comment"/>
        <context ref="block-comment"/>
      </include>
    </context>

    <context id="numeric" style-ref="number">
      <match extended="true">
        (\b([0-9]+|0[xX][0-9a-fA-F]+)[Ll]?\b|\b(([0-9]+[Ee][-]?[0-9]+|([0-9]*\.[0-9]+|[0-9]+\.)([Ee][-]?[0-9]+)?)[fFdD]?|[0-9]+[FfDd]))
      </match>
    </context>
    
    <context id="annotation">
      <match>(^\s*|[^a-zA-Z0-9_\s]\s*)(@[a-zA-Z][a-zA-Z0-9_]*)</match>
      <include>
        <context sub-pattern="2" style-ref="special"/>
      </include>
    </context>

    <context id="external" style-ref="external">
      <keyword>import</keyword>
      <keyword>package</keyword>
    </context>

    <context id="declaration" style-ref="declaration">
      <keyword>data class</keyword>
      <keyword>class</keyword>
      <keyword>interface</keyword>
      <keyword>constructor</keyword>
      <keyword>companion object</keyword>      
      <keyword>object</keyword>
      <keyword>fun</keyword>
      <keyword>val</keyword>
      <keyword>var</keyword>
      <keyword>init</keyword>      
    </context>

    <context id="primitive-type" style-ref="type">
      <keyword>Boolean</keyword>
      <keyword>Byte</keyword>
      <keyword>Char</keyword>
      <keyword>Double</keyword>
      <keyword>Float</keyword>
      <keyword>Int</keyword>
      <keyword>Long</keyword>
      <keyword>Short</keyword>
    </context>

    <context id="library-type" style-ref="type">
      <!-- collection types //-->
      <keyword>List</keyword>
      <keyword>MutableList</keyword>
      <keyword>Array</keyword>
      <keyword>String</keyword>

      <!-- general //-->
      <keyword>Null</keyword>
      <keyword>Nothing</keyword>
      <keyword>Class</keyword>
      <keyword>Pair</keyword>
      <keyword>Triple</keyword>
      <keyword>BigDecimal</keyword>
      <keyword>BigInt</keyword>

      <!-- immutable collections //-->
      <keyword>Map</keyword>
      <keyword>Set</keyword>

      <!-- mutable collections //-->
      <keyword>StringBuilder</keyword>
      <keyword>MutableMap</keyword>
      <keyword>MutableSet</keyword>
    </context>

    <context id="modifier" style-ref="modifier">
      <keyword>open</keyword>
      <keyword>final</keyword>
      <keyword>override</keyword>
      <keyword>private</keyword>
      <keyword>protected</keyword>
      <keyword>get</keyword>
      <keyword>set</keyword>
      <keyword>by</keyword>
    </context>

    <context id="flow" style-ref="keyword">
      <keyword>case</keyword>
      <keyword>catch</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>finally</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>when</keyword>
      <keyword>return</keyword>
      <keyword>throw</keyword>
      <keyword>try</keyword>
      <keyword>while</keyword>
    </context>

    <context id="memory" style-ref="keyword">
      <keyword>super</keyword>
      <keyword>this</keyword>
    </context>
    
    <context id="special" style-ref="special">
      <keyword>true</keyword>
      <keyword>false</keyword>
      <keyword>null</keyword>
    </context>


    <context id="kotlin" class="no-spell-check">
      <include>
        <context ref="multiline-string"/>
        <context ref="string"/>
        <context ref="character"/>
        <context ref="character-error"/>
        <context ref="symbol"/>
        <context ref="def:c-like-comment"/>
        <context ref="block-comment"/>
        <context ref="def:c-like-close-comment-outside-comment"/>
        <context ref="annotation"/>
        <context ref="external"/>
        <context ref="declaration"/>
        <context ref="primitive-type"/>
        <context ref="library-type"/>
        <context ref="modifier"/>
        <context ref="flow"/>
        <context ref="memory"/>
        <context ref="special"/>
        <context ref="numeric"/>
        <context ref="operators"/>
      </include>
    </context>

  </definitions>
</language>
